plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'jacoco'
}

def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : Integer.MAX_VALUE
    println "VersionCode is set to $code"
    return code
}

repositories {
    mavenCentral()
}

android {
    namespace 'codepath.demos.helloworlddemo'
    compileSdk 34

    defaultConfig {
        applicationId System.env.APP_PACKAGE_NAME ?: "codepath.demos.helloworlddemo"
        minSdk 24
        targetSdk 34
        versionCode getVersionCode()
        versionName System.env.APP_VERSION_NAME ?: "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            resValue "string", "app_name", "boiler"
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".staging"
            versionNameSuffix "-S"
            resValue "string", "app_name", "staging boiler"
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    flavorDimensions 'app'
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn("testDebugUnitTest")

    def javaClasses = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*'
    ])

    def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*'
    ])

    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    sourceDirectories.setFrom(files([
        "$projectDir/src/main/java",
        "$projectDir/src/main/kotlin"
    ]))

    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    additionalClassDirs.setFrom(files([javaClasses, kotlinClasses]))
    additionalSourceDirs.setFrom(files([
        "$projectDir/src/main/java",
        "$projectDir/src/main/kotlin"
    ]))

    executionData.setFrom(fileTree(buildDir).include("**/jacoco/testDebugUnitTest.exec"))
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
            details.useVersion '1.9.0'
        }
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.test:core:1.5.0"
    testImplementation "androidx.test.ext:junit:1.1.5"
}
